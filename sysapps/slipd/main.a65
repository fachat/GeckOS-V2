/****************************************************************************
   
    OS/A65 Version 2.1
    Multitasking Operating System for 6502 Computers

    Copyright (C) 1989-2020 Andre Fachat 

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

****************************************************************************/


/**********************************************************************
* 			     SLIP/TCP				      
*		Serial Line Internet Protocol Driver		     
*								   
* Driver connects STDIN/OUT with a serial line internet protocol    
* 								  
* Options:							 
*   NO_TEST 	- if set, do not build in echo, discard and chargen servers
*   NO_WWW	- if set, do not build in the Web server
*   NO_FSTCP 	- if set, do not provide files from an fstcp internet server
*   NO_LIBIP	- do not integrate with lib6502
*   RSH_BIN	- integrate telnet server (code required by libip as well)
*  
* 								     
**********************************************************************/

;--------------------------------
; if not defined from build. Can be set using command line option
#ifndef MY_IP
#define	MY_IP			192,168,0,64
#endif

;--------------------------------
; services

;#define	NO_FSTCP	/* if defined, do not use fstcp */
;#define	NO_WWW		/* if defined, do not use internal www server */

;#define	NO_TEST		/* if defined no echo, discard, chargen ports */
;#define	NO_RSH		/* if defined no telnet port */
;#define	NO_LIBIP	/* if defined no lib6502 ip connections */


;--------------------------------
; FSTCP host and port
#ifndef FSTCP_SERVER_IP
#define FSTCP_SERVER_IP		192,168,0,1
#endif

#ifndef FSTCP_SERVER_PORT
#define FSTCP_SERVER_PORT 	8090
#endif

;--------------------------------
; GeckOS slipd WWW server
#define WWW_DRV			2
#define	WWW_DEFAULT		"index.html"
#define	WWW_PATH		0

;--------------------------------
; GeckOS telnet port
#ifndef RSH_PORT
#define	RSH_PORT		23
#endif

; default login program to run on telnet connection
#ifndef RSHNAME
#define	RSHNAME			"c:tlogin"
#endif

;--------------------------------
#define	MAXOQUEUE	3
#define	MTU		1024
#define	MAXSLOT		24
#define	IPBUFFER	32*256	/* must be within one (4k) page for MMU! */

#define	DEBUGMEM

/**********************************************************************/

/* RECEIVE_CHECK is the RECEIVE call to get filesystem or network calls */

#ifndef NO_FSTCP
#define	RECEIVE_CHECK
#else
#ifndef NO_LIBIP
#define	RECEIVE_CHECK
#endif
#endif

/* RSH_BIN is the rsh stuff that is also used by LIBIP */

#ifndef NO_RSH
#define	RSH_BIN
#else
#ifndef NO_LIBIP
#define	RSH_BIN
#endif
#endif

/**********************************************************************/


/* #define	DEBUG */
/* #define	DEBUGMEM*/
#define	DEBUGPKT
/* #define	DEBUGTCP*/
/* #define	DEBUGTCP2*/
/* #define	DEBUGICMP*/
/* #define	DEBUGSLIP*/
/* #define	DEBUGWWW*/
/* #define	DEBUGUDP*/

#if 1
#define	DB(A)	.(:.data:ll1 .byt A,0:.text:php:lda #<ll1:ldy #>ll1:jsr strout:plp:.):
#else
#define	DB(a)
#endif


#include "kernel.i65"
#include "kdefs.i65"
#include "fdefs.i65"
#include "lib6502.i65"

#define	ECout		chrout
#define	ETxtout		strout
#define	EHexout		hexout
#define	ECrlfout	crlfout

/**********************************************************************/

          .(

	.bss
owntask	.byt 0
sendbuf	.byt 0	 ; !=0 when WWW server reads file -> filesystem doesn't listen

	.data
#ifndef NO_WWW
www_drv	.byt WWW_DRV	 ; disk drive from which to read for www server
#endif

	.zero
argp	.word 0
	.text

+main	.(
	jsr dfltpars
	jsr getopts
	bcc nohelp
usage	lda #<helpstr	; usage info
	ldy #>helpstr
	jmp strout	; and terminate
nohelp	; now (argp),y should point to the device
	lda (argp),y
	beq usage
	tya
	pha

	jsr paray
	ldx #OPEN_WR
	jsr fopen
	txa
	pha
	bcs wropenerr
	tay
	ldx #STDOUT
	jsr stddup
	bcs wropenerr
	jsr fclose
	pla		; drop

	pla		; recover pointer in argp
	pha
	jsr paray
	ldx #OPEN_RD
	jsr fopen
	txa
	pha
	bcs rdopenerr
	tay
	ldx #STDIN
	jsr stddup
	bcs rdopenerr
	jsr fclose
	pla		; drop

	pla		; recover pointer in argp

nodev 	jmp startup

rdopenerr
wropenerr
	jsr strerror
	jsr strout
	jsr crlfout
	pla		; file#
	tax
	jsr fclose
	pla		; pointer in argp
	lda #E_NODEV
	sec
	rts

dfltpars .(
	sta argp
	sty argp+1
#ifndef NO_RSH
	; default login name
	clc
	jsr setlogin
#endif
	lda argp
	ldy argp+1
	rts
	.)

paray	.(
	clc
	adc argp
	pha
	lda #0
	adc argp+1
	tay
	pla
	rts
	.)

opt_l	.(
	tya
	pha
	jsr paray

	ldx #OPEN_WR
	jsr fopen
	bcs nextarg
	txa
	tay
	ldx #STDERR
	jsr stddup
	bcs nextarg
	jsr fclose
&nextarg
	pla
	tay
npar	iny
	lda (argp),y
	bne npar
	rts
	.)

opt_i	.(
	ldx #0
iloop 	jsr parsebyte
	bcs syntax
	sta MyIP,x
	inx
	cpx #4
	bcs end
	lda (argp),y
	cmp #"."
	bne syntax
	iny
	bne iloop
end	clc
	rts
syntax	lda #E_SYNTAX
	sec
	rts	
	.)

#ifndef NO_RSH
opt_n	.(
	tya
	pha
	jsr paray
	sec
	jsr setlogin
	jmp nextarg
	.)
#endif

#ifndef NO_WWW
opt_w	.(
	lda (argp),y
	sec
	sbc #"a"
	and #$0f
	sta www_drv
; NOTE WWW server still uses SEND(FS_OPEN) instead of fopen, so chdir has no effect (yet)
;	tya
;	pha
;	jsr paray
;	jsr chdir
	jmp nextarg
	.)
#endif

#ifndef NO_FSTCP
opt_s	.(
	inc opts_f
	ldx #0
iloop 	jsr parsebyte
	bcs osynt
	jsr fstcp_setaddr
	inx
	cpx #4
	bcs end
	lda (argp),y
	cmp #"."
	bne osynt
	iny
	bne iloop
end	clc
	rts
&osynt	lda #E_SYNTAX
	sec
	rts	
	.)

opt_p	.(
	inc opts_f
	jsr parseword
	bcs osynt
	pha
	txa
	ldx #5
	jsr fstcp_setaddr
	pla
	inx
	jsr fstcp_setaddr
	clc
	rts
	.)
#endif

	.data
helpstr	.asc 13,10, "Usage:"
	.asc 13,10, "  slipd [options] <device>"
	.asc 13,10, "Runs SLIP internet protocol on the"
	.asc 13,10, "given device."
	.asc 13,10, "Options:"
	.asc 13,10, " -i <a.b.c.d>   Define local IP addr"
	.asc 13,10, " -l <logfile>   Output log to file"
#ifndef NO_RSH
	.asc 13,10, " -n <name>      use given login prg"
	.asc 13,10, "                on telnet login"
	.asc 13,10, "                (default: ", RSHNAME, ")"
#endif
#ifndef NO_WWW
	.asc 13,10, " -w <drive>     Use drive as source"
	.asc 13,10, "                for the WWW server"
#endif
#ifndef NO_FSTCP
	.asc 13,10, " -f             Enable FSTCP"
	.asc 13,10, " -s <a.b.c.d>   Define fstcp server IP"
	.asc 13,10, " -p <port>      fstcp server port"
#endif
	.asc 13,10, "Example:"
	.asc 13,10, "  slipd a:ser1"
	.asc 13,10, "    run on device a:ser1, log output"
	.asc 13,10, "    to stdout"
#ifndef NO_RSH
 	.asc 13,10, "  slipd -n c:ls a:ser1"
	.asc 13,10, "    when telneting to GeckOS, run ls"
#endif
	.asc 13,10, 0

&optslst	.asc "li"
#ifndef NO_RSH
	.asc "n"
#endif
#ifndef NO_WWW
	.asc "w"
#endif
#ifndef NO_FSTCP
	.asc "fsp"
#endif
	.asc 0

&optsflg .byt 0	; l
	.byt 0	; i
#ifndef NO_RSH
	.byt 0	; n
#endif
#ifndef NO_WWW
	.byt 0	; w
#endif
#ifndef NO_FSTCP
#ifdef NO_WWW
opts_f	.byt 1	; f - auto enable
#else
opts_f	.byt 0	; f
#endif /* NO_WWW */
	.byt 0	; s
	.byt 0	; p
#endif

&optsadh
	.byt >opt_l-1
	.byt >opt_i-1
#ifndef NO_RSH
	.byt >opt_n-1
#endif
#ifndef NO_WWW
	.byt >opt_w-1
#endif
#ifndef NO_FSTCP
	.byt 0
	.byt >opt_s-1
	.byt >opt_p-1
#endif

&optsadl
	.byt <opt_l-1
	.byt <opt_i-1
#ifndef NO_RSH
	.byt <opt_n-1
#endif
#ifndef NO_WWW
	.byt <opt_w-1
#endif
#ifndef NO_FSTCP
	.byt 0
	.byt <opt_s-1
	.byt <opt_p-1
#endif

	.text

startup
	jsr GETPID
	stx owntask
/*
.byt 2
lda #<MTU:ldy #>MTU:jsr balloc:stx sendbuf
.byt 2
lda #<60:ldy #>60:jsr btrunc
.byt 2
ldx sendbuf:jsr bfree
.byt 2
*/

	lda #0
	sta sendbuf

	jsr binit
DB("binit ")

	jsr oinit
	bcs exit
DB("oinit ")

	jsr iinit
	bcs exit
DB("iinit ")
	jsr udpinit
	bcs exit
DB("udpinit ")
	jsr tcpinit
	bcs exit
DB("tcpinit^m^j")

	; user init
#ifndef NO_TEST
        jsr tcp_test_init
#endif
#ifndef NO_FSTCP
	lda opts_f
	beq no_fstcp
        jsr fstcp_init
no_fstcp
#endif
#ifndef NO_WWW
        jsr wwwsrv_init
#endif
#ifndef NO_RSH
        jsr rsh_init
#endif
#ifndef NO_LIBIP
        jsr libip_init
#endif

doloop
	jsr mon
	jsr loopin
	jsr loopout
	jsr tcploop
#ifndef NO_FSTCP
	jsr fstcp_mloop
#endif
#ifndef NO_LIBIP
	jsr libip_mloop
#endif
#ifdef RECEIVE_CHECK
	jsr mloop
#endif
	jsr YIELD
	jmp doloop

exit	rts
	.)

#ifdef RECEIVE_CHECK
mloop	.(
	lda sendbuf
	bne norx
	clc
	jsr RECEIVE
	bcc ok
norx	rts
ok
#ifndef NO_FSTCP
	cmp #FS_ASSIGN
	bcs nofstcp
	jmp fstcp_rxmess
nofstcp
#endif
#ifndef NO_LIBIP
	/* TODO: check network calls */
	jmp libip_rxmess
#endif
	.)
#endif	/* RECEIVE_CHECK */

	.data
MyIP	.byt MY_IP
	.text

#include "sltcp.def"

#include "slipi.a65"
#include "slipo.a65"

/* protocols can share same variables */
	.(
	.zero
pp	.word 0
pd	.word 0
	.bss
pslot	.byt 0
phl	.byt 0
ppl	.word 0
pdl	.word 0
	.text

#include "mon.a65"
#include "icmp.a65"
#include "tcp.a65"
#include "udp.a65"
#include "putil.a65"
	.)

#include "mem.a65"		/* now emulates old stdlib with lib6502 */
#include "util.a65"


#include "../apps/common.a65"

PRGEND    .)

